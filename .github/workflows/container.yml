name: Container

on:
  push:
    branches: [master]
  pull_request:
    types: [opened, edited, synchronize, reopened]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_PROFILE: ${{ vars.AWS_PROFILE }}
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}

jobs:
  ecr:
    name: ECR create
    runs-on: ubuntu-latest
    environment: KookaS
    env:
      AWS_CLI_SERVICE: ecr  # private
      ECR_REPOSITORY: ${{ github.sha }}
      DOCKER_FOLDER_PATH: Dockerfile
    outputs:
      IMAGE_TAG: ${{ steps.build-image.outputs.IMAGE_TAG }}
      ECR_LOGIN_PASSWORD: ${{ steps.get-login-password.outputs.ECR_LOGIN_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Display non-sensitive variables
        run: |
          printf " \
          GITHUB_SHA = ${{ github.sha }} \n \
          ECR_REPOSITORY = $ECR_REPOSITORY\n \
          "

      - name: setup AWS CLI
        run: |
          aws --version
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }}
          aws configure set region $AWS_REGION

      - name: login to ECR
        run: |
          if [[ $AWS_CLI_SERVICE == ecr ]]; then
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
          elif [[ $AWS_CLI_SERVICE == ecr-public ]]; then
            aws ecr-public get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin public.ecr.aws
          fi
      
      - name: Create ECR repository
        run: |
          aws ecr create-repository \
            --repository-name $ECR_REPOSITORY \
            --image-scanning-configuration scanOnPush=true \
            --region $AWS_REGION \
            --output text \
            --query 'repository.repositoryUri'

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: "latest"
        run: |
          export ECR_URI=$(aws ecr describe-repositories --repository-names $ECR_REPOSITORY --output text --query "repositories[].[repositoryUri]")
          echo "ECR_URI= $ECR_URI"
          docker build -t $ECR_URI/$IMAGE_TAG -f $DOCKER_FOLDER_PATH .
          docker tag $(docker images -q $ECR_URI/$IMAGE_TAG) $ECR_URI:$IMAGE_TAG
          docker push $ECR_URI:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Get ECR login password
        id: get-login-password
        run: |
          echo "ECR_LOGIN_PASSWORD=$(aws ecr get-login-password --region $AWS_REGION)" >> $GITHUB_OUTPUT

  # Container network where we can access with the service name and the port
  localstack:
    name: Container check with localstack setup
    needs: [ecr]
    runs-on: ubuntu-latest
    container: ubuntu # connect the workflow steps to the network
    environment: KookaS
    env:
      AWS_REGION: us-east-1
      AWS_PROFILE: dummy
      AWS_ACCESS_KEY: dummy
      AWS_SECRET_KEY: dummy
    services:
      local-cloud:
        image: localstack/localstack
      local-backend:
        image:  ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ github.sha }}:${{ needs.ecr.outputs.IMAGE_TAG }}
        credentials:
          username: AWS
          password: ${{ needs.ecr.outputs.ECR_LOGIN_PASSWORD }}
        env:
          CLOUD_HOST: localstack
          LOCALSTACK_URI: http://local-cloud:4566
          COMMON_NAME: ${{ github.sha }}
          FLICKR_PRIVATE_KEY: 123
          FLICKR_PUBLIC_KEY: 123
          UNSPLASH_PRIVATE_KEY: 123
          UNSPLASH_PUBLIC_KEY: 123
          PEXELS_PUBLIC_KEY: 123
          AWS_REGION: $AWS_REGION
          AWS_PROFILE: $AWS_PROFILE
          AWS_ACCESS_KEY: $AWS_ACCESS_KEY
          AWS_SECRET_KEY: $AWS_SECRET_KEY

    steps:
      - name: Setup
        run: |
          apt update
          apt install curl unzip -y -q
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -qq awscliv2.zip
          ./aws/install

      - name: setup AWS CLI
        run: |
          aws --version
          aws configure set aws_access_key_id $AWS_ACCESS_KEY
          aws configure set aws_secret_access_key $AWS_SECRET_KEY
          aws configure set region $AWS_REGION

      - name: Status localstack
        run: |
          curl -Is http://local-cloud:4566 | grep HTTP
      - name: Status localstack table
        run: |
          aws dynamodb list-tables --endpoint-url=http://local-cloud:4566 --region=us-east-1
      - name: Status root
        run: |
          curl -Is http://local-backend:8080/ | grep HTTP
      - name: Status healthz
        run: |
          curl -Is http://local-backend:8080/healthz | grep HTTP

  dynamodb:
    name: Container check with dynamodb
    needs: [ecr]
    runs-on: ubuntu-latest
    container: ubuntu # connect the workflow steps to the network
    environment: KookaS
    services:
      local-backend:
        image:  ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ github.sha }}:${{ needs.ecr.outputs.IMAGE_TAG }}
        credentials:
          username: AWS
          password: ${{ needs.ecr.outputs.ECR_LOGIN_PASSWORD }}
        env:
          CLOUD_HOST: AWS
          COMMON_NAME: ${{ github.sha }}
          FLICKR_PRIVATE_KEY: 123
          FLICKR_PUBLIC_KEY: 123
          UNSPLASH_PRIVATE_KEY: 123
          UNSPLASH_PUBLIC_KEY: 123
          PEXELS_PUBLIC_KEY: 123
          AWS_REGION: $AWS_REGION
          AWS_PROFILE: $AWS_PROFILE
          AWS_ACCESS_KEY: $AWS_ACCESS_KEY
          AWS_SECRET_KEY: $AWS_SECRET_KEY

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup
        run: |
          apt update
          apt install curl unzip -y -q
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -qq awscliv2.zip
          ./aws/install
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          chmod +x /usr/bin/yq

      - name: setup AWS CLI
        run: |
          aws --version
          aws configure set aws_access_key_id $AWS_ACCESS_KEY
          aws configure set aws_secret_access_key $AWS_SECRET_KEY
          aws configure set region $AWS_REGION

      - name: create tables
        run: |
          names=($(yq eval '.dynamodb.*.name' config/config.yml))
          primaryKeyNames=($(yq eval '.dynamodb.*.primaryKeyName' config/config.yml))
          primaryKeyTypes=($(yq eval '.dynamodb.*.primaryKeyType' config/config.yml))
          sortKeyNames=($(yq eval '.dynamodb.*.sortKeyName' config/config.yml))
          sortKeyTypes=($(yq eval '.dynamodb.*.sortKeyType' config/config.yml))
          i=1
          for _ in $(yq eval '.dynamodb.*.name' config/config.yml)
          do
            aws dynamodb create-table \
              --region $AWS_REGION \
              --table-name $COMMON_NAME-${names[$i]} \
              --attribute-definitions AttributeName=${primaryKeyNames[$i]},AttributeType=${primaryKeyTypes[$i]} AttributeName=${sortKeyNames[$i]},AttributeType=${sortKeyTypes[$i]}\
              --key-schema AttributeName=${primaryKeyNames[$i]},KeyType=HASH AttributeName=${sortKeyNames[$i]},KeyType=RANGE \
              --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5
            i=$((i+1))
          done

      - name: Status dynamodb table
        run: |
          aws dynamodb list-tables --region=$AWS_REGION
      - name: Status root
        run: |
          curl -Is http://local-backend:8080/ | grep HTTP
      - name: Status healthz
        run: |
          curl -Is http://local-backend:8080/healthz | grep HTTP

  cleanup:
    name: ECR cleanup
    runs-on: ubuntu-latest
    needs: [ecr, localstack, dynamodb]
    if: ${{ always() && contains(join(needs.ecr.result, ','), 'success') }}
    environment: KookaS
    env:
      AWS_CLI_SERVICE: ecr  # private
      ECR_REPOSITORY: ${{ github.sha }}
    outputs:
      IMAGE_TAG: ${{ steps.build-image.outputs.IMAGE_TAG }}
      ECR_LOGIN_PASSWORD: ${{ steps.get-login-password.outputs.ECR_LOGIN_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: setup AWS CLI
        run: |
          aws --version
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }}
          aws configure set region $AWS_REGION

      - name: login to ECR
        run: |
          if [[ $AWS_CLI_SERVICE == ecr ]]; then
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
          elif [[ $AWS_CLI_SERVICE == ecr-public ]]; then
            aws ecr-public get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin public.ecr.aws
          fi
      
      - name: Delete ECR repository
        run: |
          aws ecr delete-repository \
            --repository-name $ECR_REPOSITORY \
            --force \
            --region $AWS_REGION \
            --output text \
            --query 'repository.registryId'

      - name: Delete Dynamodb tables
        if: ${{ always() && contains(join(needs.ecr.result, ','), 'success') }}
        run: |
          names=($(yq eval '.dynamodb.*.name' config/config.yml))
          primaryKeyNames=($(yq eval '.dynamodb.*.primaryKeyName' config/config.yml))
          primaryKeyTypes=($(yq eval '.dynamodb.*.primaryKeyType' config/config.yml))
          sortKeyNames=($(yq eval '.dynamodb.*.sortKeyName' config/config.yml))
          sortKeyTypes=($(yq eval '.dynamodb.*.sortKeyType' config/config.yml))
          i=1
          for _ in $(yq eval '.dynamodb.*.name' config/config.yml)
          do
            aws dynamodb delete-table \
              --region $AWS_REGION \
              --table-name $COMMON_NAME-${names[$i]}
            i=$((i+1))
          done
