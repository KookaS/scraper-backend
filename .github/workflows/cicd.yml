name: CI/CD

on:
  workflow_dispatch:
    inputs:
      aws-account-name:
        description: "AWS Account Name"
        required: true
        type: string
      common-name:
        description: "The name used acrross many resources, usually account-region-project-repo-branch"
        required: true
        type: string
      task-desired-count:
        description: "The number of tasks to run in the service"
        required: true
        type: string

env:
  AWS_ACCOUNT_NAME: ${{ inputs.aws-account-name }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  COMMON_NAME: ${{ inputs.common-name }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: "1.18.3" # The Go version to download (if necessary) and use.
      - name: build
        run: go build src/main.go

  s3-env:
    name: S3 env
    runs-on: ubuntu-latest
    environment: ${{ inputs.aws-account-name }}
    env:
      BRANCH: ${{ github.head_ref || github.ref_name }}
      AWS_ACCESS_KEY_ENV: ${{ secrets.AWS_ACCESS_KEY }}
      BUCKET_ENV: ${{ inputs.common-name }}-env # TODO: hardcoded extension here

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Display
        run: |
          printf " \
          BRANCH = $BRANCH\n \
          S3 file = s3://$BUCKET_ENV/$BRANCH.env\n \
          "

      - name: setup AWS CLI
        run: |
          aws --version
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }}
          aws configure set region $AWS_REGION

      - name: Upload env file
        run: |
          cat <<EOF > .env
          CLOUD_HOST=aws
          COMMON_NAME=$COMMON_NAME
          FLICKR_PRIVATE_KEY=${{ secrets.FLICKR_PRIVATE_KEY }}
          FLICKR_PUBLIC_KEY=${{ secrets.FLICKR_PUBLIC_KEY }}
          UNSPLASH_PRIVATE_KEY=${{ secrets.UNSPLASH_PRIVATE_KEY }}
          UNSPLASH_PUBLIC_KEY=${{ secrets.UNSPLASH_PUBLIC_KEY }}
          PEXELS_PUBLIC_KEY=${{ secrets.PEXELS_PUBLIC_KEY }}
          AWS_REGION=${{ vars.AWS_REGION }}
          AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
          EOF
          aws s3 cp .env s3://$BUCKET_ENV/$BRANCH.env

  ecr:
    name: ECR
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.aws-account-name }}
    env:
      AWS_CLI_SERVICE: ecr
      DOCKER_FOLDER_PATH: Dockerfile
      ECR_REPOSITORY: ${{ inputs.common-name }}
      IMAGE_TAG: "latest"
      SCRIPT_NAME: ecr-set.sh
      LOG_FILE: log.out
    needs: [build]
    outputs:
      IMAGE_TAG: ${{ steps.build-image.outputs.IMAGE_TAG }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: run script
        id: script
        run: |
          # curl -o $SCRIPT_NAME https://raw.githubusercontent.com/KookaS/infrastructure-modules/dynamodb/.github/workflows/ecr-create.sh?token=GHSAT0AAAAAACCEOEUUZDBFTBEZS66QJV2OZDS4JMA \
          chmod +x $SCRIPT_NAME

          eval res=$(./$SCRIPT_NAME LOG_FILE=$LOG_FILE AWS_ACCESS_KEY=$AWS_ACCESS_KEY AWS_SECRET_KEY=$AWS_SECRET_KEY AWS_REGION=$AWS_REGION AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID COMMON_NAME=$COMMON_NAME AWS_CLI_SERVICE=ecr ECR_CREATE=true IMAGE_TAG=$IMAGE_TAG DOCKER_FOLDER_PATH=$DOCKER_FOLDER_PATH)

          echo -e '\033[1mLOGS\033[0m'; cat $LOG_FILE
          if [ -n "$(grep -i error $LOG_FILE)" ]; then
            echo -e '\033[1mERRORS\033[0m'; grep -ni error $LOG_FILE | sed 's/$/\n/'; exit 10
          fi

  ecs:
    name: ECS
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.aws-account-name }}
    needs: [ecr, s3-env]
    env:
      IMAGE_TAG: ${{ needs.ecr.outputs.IMAGE_TAG }}
      DESIRED_COUNT: ${{ inputs.task-desired-count }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Display variables
        run: |
          printf " \
          AWS_REGION = $AWS_REGION\n \
          IMAGE_TAG = $IMAGE_TAG\n \
          "

      - name: setup AWS CLI
        run: |
          aws --version
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }}
          aws configure set region $AWS_REGION

      - name: Update service
        run: |
          LATEST_TASK_ARN=$(aws ecs list-task-definitions \
            --region $AWS_REGION \
            --family-prefix $COMMON_NAME \
            --sort DESC \
            --query 'taskDefinitionArns[0]' \
            --output text)
          aws ecs update-service \
            --cluster $COMMON_NAME \
            --service $COMMON_NAME \
            --force-new-deployment \
            --region $AWS_REGION \
            --task-definition $LATEST_TASK_ARN \
            --desired-count $DESIRED_COUNT \
            --output json

      - name: Wait for tasks
        run: |
          sleep 30s
          TASKS=$(aws ecs list-tasks \
          --region $AWS_REGION \
          --cluster $COMMON_NAME \
          --query 'taskArns[]' \
          --output text)
          echo $TASKS
          LATEST_TASK_DEFINITION_ARN=$(aws ecs list-task-definitions \
          --region $AWS_REGION \
          --family-prefix $COMMON_NAME \
          --sort DESC \
          --query 'taskDefinitionArns[0]' \
          --output text)

          for task in $TASKS; do
              tasksDescription=$(aws ecs describe-tasks --region $AWS_REGION --cluster $COMMON_NAME --tasks $task --query 'tasks[]' --output json) || exit 1
              echo "tasksDescription=$tasksDescription"
              latestStatus=$(jq -r  '.[]|.lastStatus' <<< $tasksDescription)
              taskDefinitionArn=$(jq -r  '.[]|.taskDefinitionArn' <<< $tasksDescription)
              echo "Waiting for task $task to be RUNNING, currently $latestStatus"
              echo "Waiting for task $task to have definition ARN $LATEST_TASK_DEFINITION_ARN, currently $taskDefinitionArn"
              
              i=0
              while [[ $latestStatus != "RUNNING" && taskDefinitionArn != $LATEST_TASK_DEFINITION_ARN ]]; do
                tasksDescription=$(aws ecs describe-tasks --region $AWS_REGION --cluster $COMMON_NAME --tasks $task --query 'tasks[]' --output json)
                latestStatus=$(jq -r  '.[]|.lastStatus' <<< $tasksDescription)
                taskDefinitionArn=$(jq -r  '.[]|.taskDefinitionArn' <<< $tasksDescription)
                echo "Waiting for task $task to be RUNNING, currently $latestStatus"
                echo "Waiting for task $task to have definition ARN $LATEST_TASK_DEFINITION_ARN, currently $taskDefinitionArn"
                sleep 10s

                if [ $i -gt 30 ] || [ "$latestStatus" = "STOPPED" ]; then exit 1; fi
                i=$((i+1))
              done
          done
