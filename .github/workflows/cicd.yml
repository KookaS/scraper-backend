name: CI/CD

# only on trunk branch use secrets
on:
  push:
    branches: [production, staging, dev]
  pull_request:
    types: [opened, edited, synchronize, reopened]
  workflow_dispatch:
    inputs:
      aws-account-name:
        description: 'AWS Account name, default github account name'
        required: true
        type: string
      aws-account-id:
        description: 'AWS Account ID'
        required: true
        type: string
      aws-region:
        description: 'AWS Region to launch the instance'
        required: true
        type: string
      environment-name:
        description: 'The name of the branch or env'
        required: true
        type: string  # check if not environment
      # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html
      container-cpu:
        description: 'The CPU value used by the container, 1024 == (1 vCPU). Beware that the memory need to scale with cpu.'
        required: true
        type: string
      # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html
      container-memory:
        description: 'The Memory value used by the container, 1024 MiB == 1 GB. Beware that the memory need to scale with cpu.'
        required: true
        type: string
      container-memory-reservation:
        description: 'The memory reservation, needs to be inferior to memory allocated.'
        required: true
        type: string
      aws-exec-role:
        description: 'The name of the task execution role that grants the Amazon ECS container agent permission to make AWS API calls on your behalf'
        required: true
        type: string
      aws-task-role:
        description: 'The IAM role defined for the task to perform, need access to all needed resources'
        required: true
        type: string
      keep-images-amount:
        description: 'Amount of images kept in the registry'
        required: true
        type: string

env:
  AWS_ACCOUNT_NAME: ${{ inputs.aws-account-name }}
  AWS_ACCOUNT_ID: ${{ inputs.aws-account-id }}
  AWS_REGION: ${{ inputs.aws-region }}
  CPU: ${{ inputs.container-cpu }}
  MEMORY: ${{ inputs.container-memory }}
  MEMORY_RESERVATION: ${{ inputs.container-memory-reservation }}
  AWS_EXEC_ROLE : ${{ inputs.aws-exec-role }}
  AWS_TASK_ROLE: ${{ inputs.aws-task-role }}
  KEEP_IMAGES_AMOUNT: ${{ inputs.keep-images-amount }}
  PROJECT_NAME: 'scraper'
  SERVICE_NAME: 'backend'
  ENVIRONMENT_NAME: ${{ inputs.environment-name }}
  COMMON_NAME: "${{ env.AWS_ACCOUNT_NAME }}-$AWS_REGION-$PROJECT_NAME-$SERVICE_NAME-$ENVIRONMENT_NAME"
  ECR_REPOSITORY: "$COMMON_NAME-repository"
  ECS_SERVICE: "$COMMON_NAME-service"
  ECS_CLUSTER: "$COMMON_NAME-cluster"
  CONTAINER_NAME: "$COMMON_NAME-container"
  DEF_FILE_NAME: "task_definition_override.json"
  POLICY_FILE_NAME: "registry_policy.json"

jobs:
  display:
    name: Show non-sensitive env variables
    runs-on: ubuntu-latest
    steps:
      - name: Display variables
        run: |
          printf " \
          AWS_ACCOUNT_NAME = $AWS_ACCOUNT_NAME\n \
          AWS_ACCOUNT_ID = $AWS_ACCOUNT_ID\n \
          AWS_REGION = $AWS_REGION\n \
          CPU = $CPU\n \
          MEMORY = $MEMORY\n \
          MEMORY_RESERVATION = $MEMORY_RESERVATION\n \
          AWS_EXEC_ROLE = $AWS_EXEC_ROLE\n \
          AWS_TASK_ROLE = $AWS_TASK_ROLE\n \
          KEEP_IMAGES_AMOUNT = $KEEP_IMAGES_AMOUNT\n \
          PROJECT_NAME = $PROJECT_NAME\n \
          SERVICE_NAME = $SERVICE_NAME\n \
          ENVIRONMENT_NAME = $ENVIRONMENT_NAME\n \
          COMMON_NAME = $COMMON_NAME\n \
          ECR_REPOSITORY = $ECR_REPOSITORY\n \
          ECS_SERVICE = $ECS_SERVICE\n \
          ECS_CLUSTER = $ECS_CLUSTER\n \
          CONTAINER_NAME = $CONTAINER_NAME\n \
          DEF_FILE_NAME = $DEF_FILE_NAME\n \
          POLICY_FILE_NAME = $POLICY_FILE_NAME\n \
          "
          
  # build:
  #   name: Build
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-go@v3
  #       with:
  #         go-version: "1.18.3" # The Go version to download (if necessary) and use.
  #     - name: build
  #       run: go build src/main.go

  ecr:
    uses: ./.github/workflows/ecr.yml
    with:
      aws-service: "ecr"
      aws-account_name: $AWS_ACCOUNT_NAME
      aws-account-id: $AWS_ACCOUNT_ID
      aws-region: $AWS_REGION
      access-key: $AWS_ACCESS_KEY_ID
      secret-key: $AWS_SECRET_ACCESS_KEY
      docker-path: $ECR_REPOSITORY
      ecr-repository-name: $KEEP_IMAGES_AMOUNT
      keep-images-amount: $POLICY_FILE_NAME

  deploy:
    name: Deploy in container
    runs-on: ubuntu-latest
    environment:
      name: production # production secret env variables
    needs: [ecr]
    # if: github.ref == 'refs/heads/production'
    # container:
    #   image: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/amazonlinux:latest
           

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: install AWS CLI
        run: |
          # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          # unzip -q awscliv2.zip
          # sudo ./aws/install
          # echo ""
          aws --version
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region $AWS_REGION
          # less is a prerequisite for aws cli in linux 
          # sudo apt-get update && sudo apt-get -q install -yy less

      - name: create json task definition
        run: |
          bash ${GITHUB_WORKSPACE}/.aws/task_definition.sh FILE_NAME="${DEF_FILE_NAME}" \
            AWS_ACCOUNT_ID="${AWS_ACCOUNT_ID}" AWS_EXEC_ROLE="${AWS_EXEC_ROLE}" \
            AWS_BUCKET_ENV_NAME="${COMMON_NAME}-secret" AWS_FILE_ENV_NAME="production.env" \
            CPU="${CPU}" MEMORY="${MEMORY}" MEMORY_RESERVATION="${MEMORY_RESERVATION}" \
            AWS_REGION="$AWS_REGION" ECR_NAME="${COMMON_NAME}" NAME="${NAME}-container" \
            DEFINITION_FAMILY="${COMMON_NAME}-definition" AWS_TASK_ROLE="${AWS_TASK_ROLE}"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: $DEF_FILE_NAME
          container-name: $CONTAINER_NAME 
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: $ECS_SERVICE
          cluster: $ECS_CLUSTER
          wait-for-service-stability: true
