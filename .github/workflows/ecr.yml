name: ECR Create

on:
  workflow_dispatch:
    inputs:
      event:
        type: choice
        description: 'Type of event'     
        required: true
        options:
        - push
        - create
        - delete
      image-tag:
        description: 'Image tag'
        required: false
        default: 'latest'
  push:
  create:
  delete:

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_PROFILE: ${{ vars.AWS_PROFILE }}
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  ECR_ORG: KookaS
  ECR_REPO: infrastructure-modules
  ECR_BRANCH: master
  ECR_REPOSITORY_NAME: "$(shell echo ${ECR_ORG}-${ECR_REPO}-${ECR_BRANCH} | tr A-Z a-z)"
  ECR_URI: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
  DOCKER_FOLDER_PATH: ./Dockerfile
  IMAGE_TAG: ${{ github.sha }}
  AWS_CLI_SERVICE: ecr
  BRANCH_THIS: ${{ github.head_ref || github.ref_name }}
  ECR_REPOSITORY_NAME_THIS: ${{ github.repository_owner }}-$(shell basename ${{ github.repository }})-${BRANCH_THIS}

jobs:
  ecr:
    name: ECR
    runs-on: ubuntu-latest
    environment: KookaS
    env:
      LOG_FILE: log.out
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run script
        id: script
        run: |
          # fail if unset variable
          set -u

          # log
          exec 3>&1 4>&2
          trap 'exec 2>&4 1>&3' 0 1 2 3
          exec 1>$LOG_FILE 2>&1

          # setup AWS CLI
          aws --version
          aws configure set aws_access_key_id $AWS_ACCESS_KEY
          aws configure set aws_secret_access_key $AWS_SECRET_KEY
          aws configure set region $AWS_REGION

          # login to ECR
          if [[ $AWS_CLI_SERVICE == ecr ]]; then
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
          elif [[ $AWS_CLI_SERVICE == ecr-public ]]; then
            aws ecr-public get-login-password --region $AWS_REGION | docker login --username AWS ---password-stdin public.ecr.aws
          fi

          ECR_IMAGE_TAG="${{ inputs.image-tag }}"
          ECR_IMAGE_TAG="${ECR_IMAGE_TAG:-latest}"
          IMAGE_KEEP_COUNT=$(if [[ $BRANCH_THIS == master ]]; then echo "5"; else echo "1"; fi)
          FORCE_DESTROY=$(if [[ $BRANCH_THIS == master ]]; then echo "false"; else echo "true"; fi)

          # action on ECR            
          if [[ ${{ github.event_name }} == push || (${{ github.event_name }} == workflow_dispatch && ${{ inputs.event }} == push) ]]; then

            docker run \
              -e AWS_REGION=AWS_REGION \
              -e AWS_PROFILE=AWS_PROFILE \
              -e AWS_ACCESS_KEY=AWS_ACCESS_KEY \
              -e AWS_SECRET_KEY=AWS_SECRET_KEY \
              -e AWS_ACCOUNT_ID=AWS_ACCOUNT_ID \
              $ECR_URI/$ECR_REPOSITORY_NAME:$ECR_IMAGE_TAG \
              /bin/sh -c " \
                make set-module-ecr-image \
                  REPOSITORY_NAME=$ECR_REPOSITORY_NAME_THIS \
                  DOCKER_FOLDER_PATH=$DOCKER_FOLDER_PATH \
                  IMAGE_TAG=$IMAGE_TAG \
              "            

          elif [[ ${{ github.event_name }} == create || (${{ github.event_name }} == workflow_dispatch && ${{ inputs.event }} == create) ]]; then

            docker run \
              -e AWS_REGION=AWS_REGION \
              -e AWS_PROFILE=AWS_PROFILE \
              -e AWS_ACCESS_KEY=AWS_ACCESS_KEY \
              -e AWS_SECRET_KEY=AWS_SECRET_KEY \
              -e AWS_ACCOUNT_ID=AWS_ACCOUNT_ID \
              $ECR_URI/$ECR_REPOSITORY_NAME:$ECR_IMAGE_TAG \
              /bin/sh -c " \
                make set-module-ecr \
                  REPOSITORY_NAME=$ECR_REPOSITORY_NAME_THIS \
                  FORCE_DESTROY=$FORCE_DESTROY \
                  IMAGE_KEEP_COUNT=$IMAGE_KEEP_COUNT \
              "

          elif [[ ${{ github.event_name }} == delete || ${{ github.event_name }} == workflow_dispatch && ${{ inputs.event }} == delete ]]; then

            aws ecr delete-repository --repository-name $ECR_REPOSITORY_NAME_THIS --force

          else

            echo "Error: event do not match, event_name ${{ github.event_name }}, inputs.event ${{ inputs.event }}

          fi

          echo -e '\033[46mLOGS\033[0m'; cat $LOG_FILE
          if [ -n "$(grep -i error $LOG_FILE)" ]; then
            echo -e '\033[41mERRORS\033[0m'; grep -ni error $LOG_FILE | sed 's/$/\n/'; exit 100
          fi