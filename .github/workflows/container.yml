name: Container

on:
  push:
    branches: [master]
  pull_request:
    types: [opened, edited, synchronize, reopened]


jobs:
  ecr:
    name: ECR create
    runs-on: ubuntu-latest
    environment: KookaS
    env:
      AWS_CLI_SERVICE: ecr  # private
      ECR_REPOSITORY: ${{ github.sha }}
      DOCKER_FOLDER_PATH: Dockerfile
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ vars.AWS_REGION }}
    outputs:
      IMAGE_TAG: ${{ steps.build-image.outputs.IMAGE_TAG }}
      ECR_LOGIN_PASSWORD: ${{ steps.get-login-password.outputs.ECR_LOGIN_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Display non-sensitive variables
        run: |
          printf " \
          GITHUB_SHA = ${{ github.sha }} \n \
          ECR_REPOSITORY = $ECR_REPOSITORY\n \
          "

      - name: setup AWS CLI
        run: |
          aws --version
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }}
          aws configure set region $AWS_REGION

      - name: login to ECR
        run: |
          if [[ $AWS_CLI_SERVICE == ecr ]]; then
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
          elif [[ $AWS_CLI_SERVICE == ecr-public ]]; then
            aws ecr-public get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin public.ecr.aws
          fi
      
      - name: Create ECR repository
        run: |
          aws ecr create-repository \
            --repository-name $ECR_REPOSITORY \
            --image-scanning-configuration scanOnPush=true \
            --region $AWS_REGION \
            --output text \
            --query 'repository.repositoryUri'

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: "latest"
        run: |
          export ECR_URI=$(aws ecr describe-repositories --repository-names $ECR_REPOSITORY --output text --query "repositories[].[repositoryUri]")
          echo "ECR_URI= $ECR_URI"
          docker build -t $ECR_URI/$IMAGE_TAG -f $DOCKER_FOLDER_PATH .
          docker tag $(docker images -q $ECR_URI/$IMAGE_TAG) $ECR_URI:$IMAGE_TAG
          docker push $ECR_URI:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Get ECR login password
        id: get-login-password
        run: |
          echo "ECR_LOGIN_PASSWORD=$(aws ecr get-login-password --region $AWS_REGION)" >> $GITHUB_OUTPUT

  # Container network where we can access with the service name and the port
  container:
    name: Container check
    needs: ecr
    runs-on: ubuntu-latest
    environment: KookaS
    services:
      localstack:
        image: localstack/localstack
        ports:
          - 4566:4566
        env:
          SERVICES: "s3,dynamodb"
          DEBUG: 1
          DEFAULT_REGION: ${{ vars.AWS_REGION }}
          AWS_ACCESS_KEY_ID: dummy
          AWS_SECRET_ACCESS_KEY: dummy
      project:
        image:  ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ github.sha }}:${{ needs.ecr.outputs.IMAGE_TAG }}
        credentials:
          username: AWS
          password: ${{ needs.ecr.outputs.ECR_LOGIN_PASSWORD }}
        ports:
          - 8080:8080
        env:
          CLOUD_HOST: localstack
          LOCALSTACK_URI: http://localstack:4566
          COMMON_NAME: ${{ github.sha }}
          FLICKR_PRIVATE_KEY: 123
          FLICKR_PUBLIC_KEY: 123
          UNSPLASH_PRIVATE_KEY: 123
          UNSPLASH_PUBLIC_KEY: 123
          PEXELS_PUBLIC_KEY: 123
          AWS_REGION: us-west-1
          AWS_PROFILE: dummy
          AWS_ACCESS_KEY: dummy
          AWS_SECRET_KEY: dummy

    steps:
      - name: Test localstack
        env:
          table_name: pictureProcess
        run: |
          aws dynamodb scan --endpoint-url=http://localstack:4566 --table-name ${{ github.sha }}-$table_name
      - name: Test root
        run: |
         curl \
            --fail \
            --silent \
            --show-error \
            --location \
            --request GET \
            --header "Content-Type: application/json" \
            http://project:8080/
      - name: Test healthz
        run: |
         curl \
            --fail \
            --silent \
            --show-error \
            --location \
            --request GET \
            --header "Content-Type: application/json" \
            http://project:8080/healthz

  cleanup:
    name: ECR cleanup
    runs-on: ubuntu-latest
    needs: [ecr, container]
    if: ${{ always() && contains(join(needs.ecr.result, ','), 'success') }}
    environment: KookaS
    env:
      AWS_CLI_SERVICE: ecr  # private
      ECR_REPOSITORY: ${{ github.sha }}
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ vars.AWS_REGION }}
    outputs:
      IMAGE_TAG: ${{ steps.build-image.outputs.IMAGE_TAG }}
      ECR_LOGIN_PASSWORD: ${{ steps.get-login-password.outputs.ECR_LOGIN_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: setup AWS CLI
        run: |
          aws --version
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }}
          aws configure set region $AWS_REGION

      - name: login to ECR
        run: |
          if [[ $AWS_CLI_SERVICE == ecr ]]; then
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
          elif [[ $AWS_CLI_SERVICE == ecr-public ]]; then
            aws ecr-public get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin public.ecr.aws
          fi
      
      - name: Delete ECR repository
        run: |
          aws ecr delete-repository \
            --repository-name $ECR_REPOSITORY \
            --force \
            --region $AWS_REGION \
            --output text \
            --query 'repository.registryId'
