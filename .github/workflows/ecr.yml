name: ECR

on:
  workflow_call:
    inputs:
      aws-cli-service:
        description: 'AWS CLI service, e.g. ecr or ecr-public'
        required: true
        type: string
      aws-account-name:
        description: 'AWS Account name, default github account name'
        required: true
        type: string
      aws-account-id:
        description: 'AWS Account ID'
        required: true
        type: string
      aws-region:
        description: 'AWS Region to launch the instance'
        required: true
        type: string
      docker-folder-path:
        description: 'The path to the folder where the file exists'
        required: true
        type: string
      registry-name:
        description: 'The name of the repository'
        required: true
        type: string
      keep-images-amount:
        description: 'The path to the docker file'
        type: string
    secrets:
      access-key:
        required: true
      secret-key:
        required: true

env:
  AWS_CLI_SERVICE: ${{ github.event.inputs.aws-cli-service }}
  AWS_ACCOUNT_NAME: ${{ github.event.inputs.aws-account-name }}
  AWS_ACCOUNT_ID: ${{ github.event.inputs.aws-account-id }}
  AWS_REGION: ${{ github.event.inputs.aws-region }}
  DOCKER_FOLDER_PATH: ${{ github.event.inputs.docker-folder-path }}
  ECR_REPOSITORY: ${{ github.event.inputs.registry-name }}
  KEEP_IMAGES_AMOUNT: ${{ github.event.inputs.keep-images-amount }}
  POLICY_FILE_NAME: "temp-file"

jobs:
  display:
    name: Show non-sensitive env variables
    runs-on: ubuntu-latest
    steps:
      - name: Display variables
        run: |
          printf " \
          AWS_CLI_SERVICE = $AWS_CLI_SERVICE\n \
          AWS_ACCOUNT_NAME = $AWS_ACCOUNT_NAME\n \
          AWS_ACCOUNT_ID = $AWS_ACCOUNT_ID\n \
          AWS_REGION = $AWS_REGION\n \
          DOCKER_FOLDER_PATH = $DOCKER_FOLDER_PATH\n \
          ECR_REPOSITORY = $ECR_REPOSITORY\n \
          KEEP_IMAGES_AMOUNT = $KEEP_IMAGES_AMOUNT\n \
          POLICY_FILE_NAME = $POLICY_FILE_NAME\n \
          "
  ecr:
    name: Publish image on ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Show workspace directory
        run: |
          pwd
          echo "AWS_CLI_SERVICE = $AWS_CLI_SERVICE"

      - name: install AWS CLI
        run: |
          # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          # unzip -q awscliv2.zip
          # ./aws/install
          aws --version
          aws configure set aws_access_key_id ${{ secrets.access-key }}
          aws configure set aws_secret_access_key ${{ secrets.secret-key }}
          aws configure set region $AWS_REGION
          # less is a prerequisite for aws cli in linux 
          # apt-get -qq update && apt-get -q install -yy less

      - name: login to ECR
        run: |
          if [[ $AWS_CLI_SERVICE == ecr ]]; then
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
          elif [[ $AWS_CLI_SERVICE == ecr-public ]]; then
            aws ecr-public get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin public.ecr.aws
          fi

      - name: create registry
        run: |
          if [[ $(aws ${{ env.AWS_CLI_SERVICE }} describe-repositories --repository-names $ECR_REPOSITORY --output text --query "repositories[].[repositoryName]") != ${{ env.ECR_REPOSITORY }} ]]; then
            echo "Creating the repository because it does not exist"
            if [[ $AWS_CLI_SERVICE == ecr ]]; then
              aws ${{ env.AWS_CLI_SERVICE }} create-repository \
                --repository-name ${{ env.ECR_REPOSITORY }} \
                --region ${AWS_REGION}
              bash ${GITHUB_WORKSPACE}/.aws/registry_policy.sh FILE_NAME="${POLICY_FILE_NAME}" KEEP_IMAGES_AMOUNT="${KEEP_IMAGES_AMOUNT}"
              aws ${AWS_CLI_SERVICE} put-lifecycle-policy --repository-name ${ECR_REPOSITORY} --lifecycle-policy-text file://${POLICY_FILE_NAME}
            elif [[ $AWS_CLI_SERVICE == ecr-public ]]; then
              bash ${GITHUB_WORKSPACE}/.aws/catalog_data.sh FILE_NAME="$POLICY_FILE_NAME" KEEP_IMAGES_AMOUNT="${KEEP_IMAGES_AMOUNT}"
              aws ecr-public create-repository \
                --repository-name $ECR_REPOSITORY \
                --catalog-data file://$POLICY_FILE_NAME \
                --region $AWS_REGION
            fi
          fi

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          export ECR_URI=$(aws ${{ env.AWS_CLI_SERVICE }} describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --output text --query "repositories[].[repositoryUri]")
          echo "$ECR_URI"
          export ECR_REGISTRY=$(aws ${{ env.AWS_CLI_SERVICE }} describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --output text --query "repositories[].[registryId]")
          # Build a docker container and push it to ECR so that it can be deployed to ECS.
          docker build ${GITHUB_WORKSPACE}/$DOCKER_FOLDER_PATH -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_URI
          docker push $ECR_URI
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"