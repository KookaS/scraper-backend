name: CI/CD

# only on trunk branch use secrets
on:
  workflow_dispatch:
    inputs:
      aws-account-name:
        description: "AWS Account name, default github account name"
        required: true
        type: string
      aws-account-id:
        description: "AWS Account ID"
        required: true
        type: string
      aws-region:
        description: "AWS Region to launch the instance"
        required: true
        type: string
      environment-name:
        description: "The name of the branch usually"
        required: true
        type: string
      task-definition-family-name:
        description: "The name of the task definition"
        required: true
        type: string
      bucket-env-name:
        description: "The name of the S3 bucket to store env file"
        required: true
        type: string
      mongodb_adress:
        description: "The adress of the mongodb instance"
        required: true
        type: string

env:
  AWS_ACCOUNT_NAME: ${{ inputs.aws-account-name }}
  AWS_ACCOUNT_ID: ${{ inputs.aws-account-id }}
  AWS_REGION: ${{ inputs.aws-region }}

  TASK_DEFINITION_NAME: ${{ inputs.task-definition-family-name }}
  ENV_FILE_NAME: "production.env"
  BUCKET_ENV: ${{ inputs.bucket-env-name }}

  COMMON_NAME: ${{ inputs.aws-account-name }}-${{ inputs.aws-region }}-scraper-backend-${{ inputs.environment-name }}

jobs:
  # build:
  #   name: Build
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-go@v3
  #       with:
  #         go-version: "1.18.3" # The Go version to download (if necessary) and use.
  #     - name: build
  #       run: go build src/main.go

  s3-env:
    name: S3 env
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.aws-account-name }}
    # needs: [build]
    env:
      MONGODB_URI: mongodb://${{ inputs.mongodb_adress }}:27017

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Display non-sensitive variables
        run: |
          printf " \
          ENV_FILE_NAME = $ENV_FILE_NAME\n \
          MONGODB_URI = $MONGODB_URI\n \
          IMAGES_BUCKET = $BUCKET_ENV\n \
          "

      - name: Upload env file
        run: |
          cat << EOF > $ENV_FILE_NAME \
          MONGODB_URI=$MONGODB_URI \
          SCRAPER_DB=scraper \
          TAGS_UNDESIRED_COLLECTION=tagsUndesired \
          TAGS_DESIRED_COLLECTION=tagsDesired \
          PRODUCTION=imagesProduction \
          PENDING=imagesPending \
          UNDESIRED=imagesUndesired \
          VALIDATION=imagesValidation \
          USERS_UNDESIRED_COLLECTION=usersUndesired \
          IMAGES_BUCKET=$BUCKET_ENV \
          FLICKR_PRIVATE_KEY=${{ secrets.FLICKR_PRIVATE_KEY }} \
          FLICKR_PUBLIC_KEY=${{ secrets.FLICKR_PUBLIC_KEY }} \
          UNSPLASH_PRIVATE_KEY=${{ secrets.UNSPLASH_PRIVATE_KEY }} \
          UNSPLASH_PUBLIC_KEY=${{ secrets.UNSPLASH_PUBLIC_KEY }} \
          PEXELS_PUBLIC_KEY=${{ secrets.PEXELS_PUBLIC_KEY }} \
          ENV=production \
          EOF
          aws s3 cp .env.production s3://$BUCKET_ENV/$ENV_FILE_NAME

  ecr:
    name: ECR
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.aws-account-name }}
    env:
      AWS_CLI_SERVICE: ecr
      DOCKER_FOLDER_PATH: ""
    # needs: [build]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Format variables
        run: |
          echo "ECR_REPOSITORY=${COMMON_NAME,,}" >>${GITHUB_ENV}

      - name: Display non-sensitive variables
        run: |
          printf " \
          AWS_CLI_SERVICE = $AWS_CLI_SERVICE\n \
          AWS_ACCOUNT_ID = $AWS_ACCOUNT_ID\n \
          AWS_REGION = $AWS_REGION\n \
          DOCKER_FOLDER_PATH = $DOCKER_FOLDER_PATH\n \
          ECR_REPOSITORY = $ECR_REPOSITORY\n \
          "

      - name: install AWS CLI
        run: |
          # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          # unzip -q awscliv2.zip
          # sudo ./aws/install
          # sudo apt-get update && sudo apt-get -q install -yy less
          aws --version
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region $AWS_REGION

      - name: login to ECR
        run: |
          if [[ $AWS_CLI_SERVICE == ecr ]]; then
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
          elif [[ $AWS_CLI_SERVICE == ecr-public ]]; then
            aws ecr-public get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin public.ecr.aws
          fi

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          export ECR_URI=$(aws $AWS_CLI_SERVICE describe-repositories --repository-names $ECR_REPOSITORY --output text --query "repositories[].[repositoryUri]")
          echo "ECR_URI= $ECR_URI"
          docker build ${GITHUB_WORKSPACE}/$DOCKER_FOLDER_PATH -t $IMAGE_TAG
          docker tag $(docker images -q $IMAGE_TAG) $ECR_URI:$IMAGE_TAG
          docker push $ECR_URI:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

  ecs:
    name: ECS
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.aws-account-name }}
    needs: [ecr, s3-env]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Format variables
        run: |
          echo "ECS_SERVICE=${COMMON_NAME,,}" >>${GITHUB_ENV}
          echo "ECS_CLUSTER=${COMMON_NAME,,}" >>${GITHUB_ENV}
          echo "CONTAINER_NAME=${COMMON_NAME,,}" >>${GITHUB_ENV}

      - name: Display variables
        run: |
          printf " \
          AWS_REGION = $AWS_REGION\n \
          ECS_SERVICE = $ECS_SERVICE\n \
          ECS_CLUSTER = $ECS_CLUSTER\n \
          CONTAINER_NAME = $CONTAINER_NAME\n \
          IMAGE_TAG = $IMAGE_TAG\n \
          "

      - name: install AWS CLI
        run: |
          # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          # unzip -q awscliv2.zip
          # sudo ./aws/install
          # sudo apt-get update && sudo apt-get -q install -yy less
          aws --version
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region $AWS_REGION

      - name: create json task definition
        run: |
          export TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_NAME --output json)
          cat << EOF > task_definition.json \
          $TASK_DEFINITION
          EOF
          echo $TASK_DEFINITION

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task_definition.json
          container-name: $CONTAINER_NAME
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: $ECS_SERVICE
          cluster: $ECS_CLUSTER
          wait-for-service-stability: true
